{"version":3,"sources":["../../lib/context/state.js"],"names":["contextNameToStateName","contextName","name","initialValues","contextStateName","context","value","update","init","stateRef","Object","assign","newValue","StateProvider","props","Provider","children","propTypes","PropTypes","instanceOf","React","Component","node","provide","instance","state","withCtx","Compo","ConsumerWrapper","Consumer","ctx"],"mappings":";;;;;;;AAmBA;;AACA;;AAEA;;;;;;;;;;AAEO,IAAMA,sBAAsB,GAAG,SAAzBA,sBAAyB,CAAAC,WAAW;AAAA,mBAC5CA,WAD4C;AAAA,CAA1C;AAGP;;;;;eACe,kBAACC,IAAD,EAAOC,aAAP,EACf;AACE,MAAMC,gBAAgB,GAAGJ,sBAAsB,CAACE,IAAD,CAA/C;AACA,MAAMG,OAAO,GAAG,0BAAc;AAC5BC,IAAAA,KAAK,EAAEH,aADqB;AAE5BI,IAAAA,MAAM,EAAE,kBAAM,CAAE;AAFY,GAAd,CAAhB;AAKA;;AACA,MAAMC,IAAI,GAAG,SAAPA,IAAO,CAAAC,QAAQ;AAAA,WAAK;AACxBH,MAAAA,KAAK,EAAEI,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBR,aAAlB,CADiB;AAExBI,MAAAA,MAAM,EAAE,gBAAAK,QAAQ;AAAA,eAAI,iCAClBH,QADkB,sBAGfL,gBAHe,EAGIQ,QAHJ,EAAJ;AAAA;AAFQ,KAAL;AAAA,GAArB;AASA;;;AACA,MAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAAAC,KAAK,EAAI;AAC7B,QAAMC,QAAQ,GAAGV,OAAO,CAACU,QAAzB;AACA,WAAO,gCAAC,QAAD;AAAU,MAAA,KAAK,EAAED,KAAK,CAACL;AAAvB,OACJK,KAAK,CAACE,QADF,CAAP;AAGD,GALD;;AAMAH,EAAAA,aAAa,CAACI,SAAd,GAA0B;AACxBR,IAAAA,QAAQ,EAAES,sBAAUC,UAAV,CAAqBC,kBAAMC,SAA3B,CADc;AAExBL,IAAAA,QAAQ,EAAEE,sBAAUI;AAFI,GAA1B;AAKA;;;;;;;AAMA,MAAMC,OAAO,GAAG,SAAVA,OAAU,CAAAC,QAAQ;AAAA,WACtB,gCAAC,aAAD;AAAe,MAAA,QAAQ,EAAEA,QAAQ,CAACC,KAAT,CAAerB,gBAAf;AAAzB,MADsB;AAAA,GAAxB;AAGA;;;;;AAGA,MAAMsB,OAAO,GAAG,SAAVA,OAAU,CAAAC,KAAK,EAAI;AACvB,QAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAAAd,KAAK,EAAI;AAC/B,UAAMe,QAAQ,GAAGxB,OAAO,CAACwB,QAAzB;AACA,aAAO,gCAAC,QAAD,QACJ,UAAAC,GAAG;AAAA,eAAI,gCAAC,KAAD,eACFhB,KADE,sBAEAV,gBAFA,EAEmB0B,GAFnB,GAAJ;AAAA,OADC,CAAP;AAKD,KAPD;;AAQA,WAAOF,eAAP;AACD,GAVD;;AAYA,SAAO;AACLC,IAAAA,QAAQ,EAAExB,OAAO,CAACwB,QADb;AAELd,IAAAA,QAAQ,EAAEF,aAFL;AAGLL,IAAAA,IAAI,EAAJA,IAHK;AAILkB,IAAAA,OAAO,EAAPA,OAJK;AAKLH,IAAAA,OAAO,EAAPA;AALK,GAAP;AAOD,C","sourcesContent":["/******************************************************************************\n * @preserve\n * @cley_faye/react-utils - small set of React utilities\n * Copyright (C) 2019 Gabriel Paul \"Cley Faye\" Risterucci\n * <cleyfaye@cleyfaye.net>\n * \n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n * \n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n * \n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport {createContext} from \"react\";\nimport {promiseUpdateState} from \"../mixin/exstate\";\n\nexport const contextNameToStateName = contextName =>\n  `${contextName}Ctx`;\n\n/** Create a Context that is backed by a Component's state */\nexport default (name, initialValues) =>\n{\n  const contextStateName = contextNameToStateName(name);\n  const context = createContext({\n    value: initialValues,\n    update: () => {},\n  });\n\n  /** Create the actual context value stored in an object's state */\n  const init = stateRef => ({\n    value: Object.assign({}, initialValues),\n    update: newValue => promiseUpdateState(\n      stateRef,\n      {\n        [contextStateName]: newValue,\n      }),\n  });\n\n  /** Provider that pick the state from the provided state value */\n  const StateProvider = props => {\n    const Provider = context.Provider;\n    return <Provider value={props.stateRef}>\n      {props.children}\n    </Provider>;\n  };\n  StateProvider.propTypes = {\n    stateRef: PropTypes.instanceOf(React.Component),\n    children: PropTypes.node,\n  };\n\n  /** Construct a Provider built on a given instance state.\n   * \n   * This is needed to actually update the rendered components when the state\n   * update and to keep it easy to use by not having to explicitely reference\n   * the state field used.\n   */\n  const provide = instance =>\n    <StateProvider stateRef={instance.state[contextStateName]} />;\n\n  /** Functional component to automatically provide a Context in another\n   * Component's props.\n   */\n  const withCtx = Compo => {\n    const ConsumerWrapper = props => {\n      const Consumer = context.Consumer;\n      return <Consumer>\n        {ctx => <Compo\n          {...props}\n          {...{[contextStateName]: ctx}} />}\n      </Consumer>;\n    };\n    return ConsumerWrapper;\n  };\n\n  return {\n    Consumer: context.Consumer,\n    Provider: StateProvider,\n    init,\n    withCtx,\n    provide,\n  };\n};"],"file":"state.js"}