{"version":3,"sources":["../../lib/mixin/exstate.js"],"names":["promiseUpdateState","instance","newValue","Promise","resolve","setState","initialValue","state","undefined","_initialState","Object","assign","updateState","resetState"],"mappings":";;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;AAoBA;;;;;;;;;;;;AAYO,IAAMA,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,QAAD,EAAWC,QAAX;AAAA,SAAwB,IAAIC,OAAJ,CAAY,UAAAC,OAAO;AAAA,WAC3EH,QAAQ,CAACI,QAAT,CAAkBH,QAAlB,EAA4B;AAAA,aAAME,OAAO,EAAb;AAAA,KAA5B,CAD2E;AAAA,GAAnB,CAAxB;AAAA,CAA3B;AAGP;;;;;;;;;;;;;;;;eAYe,kBAACH,QAAD,EAAWK,YAAX,EAA4B;AACzC,MAAIL,QAAQ,CAACM,KAAT,KAAmBC,SAAvB,EAAkC;AAChCP,IAAAA,QAAQ,CAACM,KAAT,GAAiB,EAAjB;AACD;;AACD,MAAID,YAAY,KAAKE,SAArB,EAAgC;AAC9BP,IAAAA,QAAQ,CAACQ,aAAT,GAAyBC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBL,YAAlB,CAAzB;AACAL,IAAAA,QAAQ,CAACM,KAAT,GAAiBG,MAAM,CAACC,MAAP,CAAcV,QAAQ,CAACM,KAAvB,EAA8BN,QAAQ,CAACQ,aAAvC,CAAjB;AACD;;AACDR,EAAAA,QAAQ,CAACW,WAAT,GAAuB,UAAAV,QAAQ;AAAA,WAAIF,kBAAkB,CAACC,QAAD,EAAWC,QAAX,CAAtB;AAAA,GAA/B;;AACAD,EAAAA,QAAQ,CAACY,UAAT,GAAsB;AAAA,WAAMZ,QAAQ,CAACW,WAAT,CAAqBX,QAAQ,CAACQ,aAA9B,CAAN;AAAA,GAAtB;AACD,C","sourcesContent":["/******************************************************************************\n * @preserve\n * @cley_faye/react-utils - small set of React utilities\n * Copyright (C) 2019 Gabriel Paul \"Cley Faye\" Risterucci\n * <cleyfaye@cleyfaye.net>\n * \n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n * \n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n * \n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\n/** Update the state of an object using a Promise-based interface.\n * \n * @param {Component} instance\n * The object to update the state on\n * \n * @param {(function(oldValue): Object|Object)} newValue\n * Either the new value to put into the state, or a function that take as\n * parameter the old value and return the new value.\n * \n * @return {Promise<void>}\n * A promise that resolve when the state is updated.\n */\nexport const promiseUpdateState = (instance, newValue) => new Promise(resolve =>\n  instance.setState(newValue, () => resolve()));\n\n/** Extend an instance of Component with Promise-based state handling.\n * \n * It will add two methods to the instance:\n * - updateState(newValue): return a promise that resolve when the state updated\n * - resetState(): reset state values to initialValue\n * \n * @param {Component} instance\n * The instance of Component to extend\n * \n * @param {Object} initialValue\n * Initial value of the state. Used both in initialisation and for reset.\n */\nexport default (instance, initialValue) => {\n  if (instance.state === undefined) {\n    instance.state = {};\n  }\n  if (initialValue !== undefined) {\n    instance._initialState = Object.assign({}, initialValue);\n    instance.state = Object.assign(instance.state, instance._initialState);\n  }\n  instance.updateState = newValue => promiseUpdateState(instance, newValue);\n  instance.resetState = () => instance.updateState(instance._initialState);\n};"],"file":"exstate.js"}